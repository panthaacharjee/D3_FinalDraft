/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BusdInterface extends ethers.utils.Interface {
  functions: {
    "disregardProposeOwner()": FunctionFragment;
    "name()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetProtectionRole()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "betaDelegatedTransferBatch(bytes32[],bytes32[],uint8[],address[],uint256[],uint256[],uint256[],uint256[])": FunctionFragment;
    "betaDelegatedTransfer(bytes,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "initializeDomainSeparator()": FunctionFragment;
    "decimals()": FunctionFragment;
    "unpause()": FunctionFragment;
    "unfreeze(address)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "setSupplyController(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "pause()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "nextSeqOf(address)": FunctionFragment;
    "setAssetProtectionRole(address)": FunctionFragment;
    "freeze(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "symbol()": FunctionFragment;
    "setBetaDelegateWhitelister(address)": FunctionFragment;
    "decreaseSupply(uint256)": FunctionFragment;
    "isWhitelistedBetaDelegate(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "whitelistBetaDelegate(address)": FunctionFragment;
    "proposeOwner(address)": FunctionFragment;
    "increaseSupply(uint256)": FunctionFragment;
    "betaDelegateWhitelister()": FunctionFragment;
    "proposedOwner()": FunctionFragment;
    "unwhitelistBetaDelegate(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "wipeFrozenAddress(address)": FunctionFragment;
    "EIP712_DOMAIN_HASH()": FunctionFragment;
    "isFrozen(address)": FunctionFragment;
    "supplyController()": FunctionFragment;
    "reclaimBUSD()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "disregardProposeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetProtectionRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "betaDelegatedTransferBatch",
    values: [
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "betaDelegatedTransfer",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unfreeze", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextSeqOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAssetProtectionRole",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "freeze", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBetaDelegateWhitelister",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedBetaDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistBetaDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betaDelegateWhitelister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwhitelistBetaDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeFrozenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supplyController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimBUSD",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "disregardProposeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetProtectionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "betaDelegatedTransferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "betaDelegatedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextSeqOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetProtectionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBetaDelegateWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedBetaDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistBetaDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "betaDelegateWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwhitelistBetaDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wipeFrozenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimBUSD",
    data: BytesLike
  ): Result;

  events: {
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferProposed(address,address)": EventFragment;
    "OwnershipTransferDisregarded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause()": EventFragment;
    "Unpause()": EventFragment;
    "AddressFrozen(address)": EventFragment;
    "AddressUnfrozen(address)": EventFragment;
    "FrozenAddressWiped(address)": EventFragment;
    "AssetProtectionRoleSet(address,address)": EventFragment;
    "SupplyIncreased(address,uint256)": EventFragment;
    "SupplyDecreased(address,uint256)": EventFragment;
    "SupplyControllerSet(address,address)": EventFragment;
    "BetaDelegatedTransfer(address,address,uint256,uint256,uint256)": EventFragment;
    "BetaDelegateWhitelisterSet(address,address)": EventFragment;
    "BetaDelegateWhitelisted(address)": EventFragment;
    "BetaDelegateUnwhitelisted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferProposed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferDisregarded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressUnfrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FrozenAddressWiped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetProtectionRoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetaDelegatedTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetaDelegateWhitelisterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetaDelegateWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetaDelegateUnwhitelisted"): EventFragment;
}

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type OwnershipTransferProposedEvent = TypedEvent<
  [string, string],
  { currentOwner: string; proposedOwner: string }
>;

export type OwnershipTransferProposedEventFilter =
  TypedEventFilter<OwnershipTransferProposedEvent>;

export type OwnershipTransferDisregardedEvent = TypedEvent<
  [string],
  { oldProposedOwner: string }
>;

export type OwnershipTransferDisregardedEventFilter =
  TypedEventFilter<OwnershipTransferDisregardedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[], {}>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type UnpauseEvent = TypedEvent<[], {}>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export type AddressFrozenEvent = TypedEvent<[string], { addr: string }>;

export type AddressFrozenEventFilter = TypedEventFilter<AddressFrozenEvent>;

export type AddressUnfrozenEvent = TypedEvent<[string], { addr: string }>;

export type AddressUnfrozenEventFilter = TypedEventFilter<AddressUnfrozenEvent>;

export type FrozenAddressWipedEvent = TypedEvent<[string], { addr: string }>;

export type FrozenAddressWipedEventFilter =
  TypedEventFilter<FrozenAddressWipedEvent>;

export type AssetProtectionRoleSetEvent = TypedEvent<
  [string, string],
  { oldAssetProtectionRole: string; newAssetProtectionRole: string }
>;

export type AssetProtectionRoleSetEventFilter =
  TypedEventFilter<AssetProtectionRoleSetEvent>;

export type SupplyIncreasedEvent = TypedEvent<
  [string, BigNumber],
  { to: string; value: BigNumber }
>;

export type SupplyIncreasedEventFilter = TypedEventFilter<SupplyIncreasedEvent>;

export type SupplyDecreasedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; value: BigNumber }
>;

export type SupplyDecreasedEventFilter = TypedEventFilter<SupplyDecreasedEvent>;

export type SupplyControllerSetEvent = TypedEvent<
  [string, string],
  { oldSupplyController: string; newSupplyController: string }
>;

export type SupplyControllerSetEventFilter =
  TypedEventFilter<SupplyControllerSetEvent>;

export type BetaDelegatedTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  { from: string; to: string; value: BigNumber; seq: BigNumber; fee: BigNumber }
>;

export type BetaDelegatedTransferEventFilter =
  TypedEventFilter<BetaDelegatedTransferEvent>;

export type BetaDelegateWhitelisterSetEvent = TypedEvent<
  [string, string],
  { oldWhitelister: string; newWhitelister: string }
>;

export type BetaDelegateWhitelisterSetEventFilter =
  TypedEventFilter<BetaDelegateWhitelisterSetEvent>;

export type BetaDelegateWhitelistedEvent = TypedEvent<
  [string],
  { newDelegate: string }
>;

export type BetaDelegateWhitelistedEventFilter =
  TypedEventFilter<BetaDelegateWhitelistedEvent>;

export type BetaDelegateUnwhitelistedEvent = TypedEvent<
  [string],
  { oldDelegate: string }
>;

export type BetaDelegateUnwhitelistedEventFilter =
  TypedEventFilter<BetaDelegateUnwhitelistedEvent>;

export interface Busd extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BusdInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disregardProposeOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetProtectionRole(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    betaDelegatedTransferBatch(
      r: BytesLike[],
      s: BytesLike[],
      v: BigNumberish[],
      to: string[],
      value: BigNumberish[],
      fee: BigNumberish[],
      seq: BigNumberish[],
      deadline: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    betaDelegatedTransfer(
      sig: BytesLike,
      to: string,
      value: BigNumberish,
      fee: BigNumberish,
      seq: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeDomainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreeze(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyController(
      _newSupplyController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(_addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    nextSeqOf(target: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setAssetProtectionRole(
      _newAssetProtectionRole: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeze(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    setBetaDelegateWhitelister(
      _newWhitelister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWhitelistedBetaDelegate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistBetaDelegate(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeOwner(
      _proposedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    betaDelegateWhitelister(overrides?: CallOverrides): Promise<[string]>;

    proposedOwner(overrides?: CallOverrides): Promise<[string]>;

    unwhitelistBetaDelegate(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wipeFrozenAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<[string]>;

    isFrozen(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    supplyController(overrides?: CallOverrides): Promise<[string]>;

    reclaimBUSD(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  disregardProposeOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetProtectionRole(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  betaDelegatedTransferBatch(
    r: BytesLike[],
    s: BytesLike[],
    v: BigNumberish[],
    to: string[],
    value: BigNumberish[],
    fee: BigNumberish[],
    seq: BigNumberish[],
    deadline: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  betaDelegatedTransfer(
    sig: BytesLike,
    to: string,
    value: BigNumberish,
    fee: BigNumberish,
    seq: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeDomainSeparator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreeze(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyController(
    _newSupplyController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  balanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  nextSeqOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

  setAssetProtectionRole(
    _newAssetProtectionRole: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeze(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  setBetaDelegateWhitelister(
    _newWhitelister: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseSupply(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWhitelistedBetaDelegate(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistBetaDelegate(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeOwner(
    _proposedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseSupply(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  betaDelegateWhitelister(overrides?: CallOverrides): Promise<string>;

  proposedOwner(overrides?: CallOverrides): Promise<string>;

  unwhitelistBetaDelegate(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wipeFrozenAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

  isFrozen(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  supplyController(overrides?: CallOverrides): Promise<string>;

  reclaimBUSD(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disregardProposeOwner(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetProtectionRole(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    betaDelegatedTransferBatch(
      r: BytesLike[],
      s: BytesLike[],
      v: BigNumberish[],
      to: string[],
      value: BigNumberish[],
      fee: BigNumberish[],
      seq: BigNumberish[],
      deadline: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    betaDelegatedTransfer(
      sig: BytesLike,
      to: string,
      value: BigNumberish,
      fee: BigNumberish,
      seq: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeDomainSeparator(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unfreeze(_addr: string, overrides?: CallOverrides): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    setSupplyController(
      _newSupplyController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    balanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    nextSeqOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAssetProtectionRole(
      _newAssetProtectionRole: string,
      overrides?: CallOverrides
    ): Promise<void>;

    freeze(_addr: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    setBetaDelegateWhitelister(
      _newWhitelister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseSupply(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedBetaDelegate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistBetaDelegate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeOwner(
      _proposedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseSupply(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    betaDelegateWhitelister(overrides?: CallOverrides): Promise<string>;

    proposedOwner(overrides?: CallOverrides): Promise<string>;

    unwhitelistBetaDelegate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wipeFrozenAddress(_addr: string, overrides?: CallOverrides): Promise<void>;

    EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

    isFrozen(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    supplyController(overrides?: CallOverrides): Promise<string>;

    reclaimBUSD(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferProposed(address,address)"(
      currentOwner?: string | null,
      proposedOwner?: string | null
    ): OwnershipTransferProposedEventFilter;
    OwnershipTransferProposed(
      currentOwner?: string | null,
      proposedOwner?: string | null
    ): OwnershipTransferProposedEventFilter;

    "OwnershipTransferDisregarded(address)"(
      oldProposedOwner?: string | null
    ): OwnershipTransferDisregardedEventFilter;
    OwnershipTransferDisregarded(
      oldProposedOwner?: string | null
    ): OwnershipTransferDisregardedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause()"(): PauseEventFilter;
    Pause(): PauseEventFilter;

    "Unpause()"(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;

    "AddressFrozen(address)"(addr?: string | null): AddressFrozenEventFilter;
    AddressFrozen(addr?: string | null): AddressFrozenEventFilter;

    "AddressUnfrozen(address)"(
      addr?: string | null
    ): AddressUnfrozenEventFilter;
    AddressUnfrozen(addr?: string | null): AddressUnfrozenEventFilter;

    "FrozenAddressWiped(address)"(
      addr?: string | null
    ): FrozenAddressWipedEventFilter;
    FrozenAddressWiped(addr?: string | null): FrozenAddressWipedEventFilter;

    "AssetProtectionRoleSet(address,address)"(
      oldAssetProtectionRole?: string | null,
      newAssetProtectionRole?: string | null
    ): AssetProtectionRoleSetEventFilter;
    AssetProtectionRoleSet(
      oldAssetProtectionRole?: string | null,
      newAssetProtectionRole?: string | null
    ): AssetProtectionRoleSetEventFilter;

    "SupplyIncreased(address,uint256)"(
      to?: string | null,
      value?: null
    ): SupplyIncreasedEventFilter;
    SupplyIncreased(
      to?: string | null,
      value?: null
    ): SupplyIncreasedEventFilter;

    "SupplyDecreased(address,uint256)"(
      from?: string | null,
      value?: null
    ): SupplyDecreasedEventFilter;
    SupplyDecreased(
      from?: string | null,
      value?: null
    ): SupplyDecreasedEventFilter;

    "SupplyControllerSet(address,address)"(
      oldSupplyController?: string | null,
      newSupplyController?: string | null
    ): SupplyControllerSetEventFilter;
    SupplyControllerSet(
      oldSupplyController?: string | null,
      newSupplyController?: string | null
    ): SupplyControllerSetEventFilter;

    "BetaDelegatedTransfer(address,address,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null,
      seq?: null,
      fee?: null
    ): BetaDelegatedTransferEventFilter;
    BetaDelegatedTransfer(
      from?: string | null,
      to?: string | null,
      value?: null,
      seq?: null,
      fee?: null
    ): BetaDelegatedTransferEventFilter;

    "BetaDelegateWhitelisterSet(address,address)"(
      oldWhitelister?: string | null,
      newWhitelister?: string | null
    ): BetaDelegateWhitelisterSetEventFilter;
    BetaDelegateWhitelisterSet(
      oldWhitelister?: string | null,
      newWhitelister?: string | null
    ): BetaDelegateWhitelisterSetEventFilter;

    "BetaDelegateWhitelisted(address)"(
      newDelegate?: string | null
    ): BetaDelegateWhitelistedEventFilter;
    BetaDelegateWhitelisted(
      newDelegate?: string | null
    ): BetaDelegateWhitelistedEventFilter;

    "BetaDelegateUnwhitelisted(address)"(
      oldDelegate?: string | null
    ): BetaDelegateUnwhitelistedEventFilter;
    BetaDelegateUnwhitelisted(
      oldDelegate?: string | null
    ): BetaDelegateUnwhitelistedEventFilter;
  };

  estimateGas: {
    disregardProposeOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetProtectionRole(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    betaDelegatedTransferBatch(
      r: BytesLike[],
      s: BytesLike[],
      v: BigNumberish[],
      to: string[],
      value: BigNumberish[],
      fee: BigNumberish[],
      seq: BigNumberish[],
      deadline: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    betaDelegatedTransfer(
      sig: BytesLike,
      to: string,
      value: BigNumberish,
      fee: BigNumberish,
      seq: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeDomainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreeze(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyController(
      _newSupplyController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    nextSeqOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAssetProtectionRole(
      _newAssetProtectionRole: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeze(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    setBetaDelegateWhitelister(
      _newWhitelister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWhitelistedBetaDelegate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistBetaDelegate(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeOwner(
      _proposedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    betaDelegateWhitelister(overrides?: CallOverrides): Promise<BigNumber>;

    proposedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    unwhitelistBetaDelegate(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wipeFrozenAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    isFrozen(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    supplyController(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimBUSD(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disregardProposeOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetProtectionRole(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betaDelegatedTransferBatch(
      r: BytesLike[],
      s: BytesLike[],
      v: BigNumberish[],
      to: string[],
      value: BigNumberish[],
      fee: BigNumberish[],
      seq: BigNumberish[],
      deadline: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    betaDelegatedTransfer(
      sig: BytesLike,
      to: string,
      value: BigNumberish,
      fee: BigNumberish,
      seq: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeDomainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreeze(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyController(
      _newSupplyController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextSeqOf(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetProtectionRole(
      _newAssetProtectionRole: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeze(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBetaDelegateWhitelister(
      _newWhitelister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelistedBetaDelegate(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistBetaDelegate(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeOwner(
      _proposedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    betaDelegateWhitelister(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unwhitelistBetaDelegate(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wipeFrozenAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaimBUSD(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
